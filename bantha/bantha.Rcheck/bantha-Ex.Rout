
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bantha"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "bantha-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('bantha')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bantha")
> ### * bantha
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bantha
> ### Title: Bayesian Network Thresholding Heuristic Algorithm (BANTHA)
> ### Aliases: bantha
> 
> ### ** Examples
> 
> data(choi25)
> bantha(choi25, a = 1)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [2,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [3,]    0    0    0    0    0    0    0    0    1     0     0     0     0
 [4,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [5,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [6,]    1    0    0    0    1    0    0    0    0     0     0     0     0
 [7,]    0    0    0    0    0    0    0    0    0     0     0     1     0
 [8,]    1    0    0    0    0    0    0    0    0     0     0     0     0
 [9,]    1    0    0    0    0    0    0    1    0     0     0     0     0
[10,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[11,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[12,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[13,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[14,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[15,]    1    0    0    0    0    0    0    0    0     0     0     0     0
[16,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[17,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[18,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[19,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[20,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[21,]    0    0    0    1    0    0    0    0    0     0     0     0     0
[22,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[23,]    0    0    1    0    0    0    0    0    0     0     0     0     0
[24,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[25,]    0    0    0    0    0    0    0    0    0     0     1     0     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     1     0     0     0     0     0     0
 [3,]     0     0     0     1     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0     0     1     1     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     0     0     0     0     0     0     0
[11,]     0     0     0     1     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     0     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     0     0     0     0
[14,]     0     0     0     1     0     0     0     0     0     0     0     1
[15,]     0     0     0     0     0     0     0     0     0     0     0     0
[16,]     0     0     0     0     1     0     0     0     0     0     0     0
[17,]     0     1     0     0     0     0     1     0     0     0     0     0
[18,]     0     0     0     0     0     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     1     0     0     0     0     0     0     0
[22,]     0     0     0     1     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     1     0     0     0     0     0     0     0     0     0     0     0
[25,]     0     0     0     0     0     0     0     0     0     0     0     0
attr(,"settings")
attr(,"settings")$a
[1] 1

attr(,"settings")$n_candidates
[1] 1500

attr(,"settings")$n_cores
[1] 16

attr(,"n_not_optimal")
[1] 0
attr(,"expected_loss")
[1] 6.216
attr(,"elapsed_seconds")
    overall   transform proportions      search 
0.006874553 0.002536713 0.000432373 0.001135536 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bantha", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compute_expected_gsh_loss")
> ### * compute_expected_gsh_loss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compute_expected_gsh_loss
> ### Title: Compute Expected Generalized Structural Hamming (GSH) Loss
> ### Aliases: compute_expected_gsh_loss
> 
> ### ** Examples
> 
> data(choi25)
> gsh <- initialized_expected_gsh_loss(choi25, a = 1)
> compute_expected_gsh_loss(choi25[,,1], gsh)
[1] 7.036
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compute_expected_gsh_loss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gsh_loss_builder_new")
> ### * gsh_loss_builder_new
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gsh_loss_builder_new
> ### Title: Initialize Expected Generalized Structural Hamming (GSH) Loss
> ### Aliases: gsh_loss_builder_new
> 
> ### ** Examples
> 
> data(choi25)
> gsh_builder <- gsh_loss_builder_new(ncol(choi25), nrow(choi25), 4, a = 1)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gsh_loss_builder_new", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gsh_loss_builder_process")
> ### * gsh_loss_builder_process
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gsh_loss_builder_process
> ### Title: Initialize Expected Generalized Structural Hamming (GSH) Loss
> ### Aliases: gsh_loss_builder_process
> 
> ### ** Examples
> 
> data(choi25)
> gsh_builder <- gsh_loss_builder_new(ncol(choi25), nrow(choi25), 4, a = 1)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gsh_loss_builder_process", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("initialized_expected_gsh_loss")
> ### * initialized_expected_gsh_loss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: initialized_expected_gsh_loss
> ### Title: Initialize Expected Generalized Structural Hamming (GSH) Loss
> ### Aliases: initialized_expected_gsh_loss
> 
> ### ** Examples
> 
> data(choi25)
> initialized_expected_gsh_loss(choi25, a = 1)
<pointer: 0x17d0040>
attr(,"@")
`@`
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("initialized_expected_gsh_loss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is_dag")
> ### * is_dag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is_dag
> ### Title: Check if a Graph is a Directed Acyclic Graph (DAG)
> ### Aliases: is_dag
> 
> ### ** Examples
> 
> # Example 1: This demonstration checks if a real DAG returns true.
> dag_matrix <- matrix(c(0, 1, 0,
+                        0, 0, 1,
+                        0, 0, 0), nrow = 3, byrow = TRUE)
> is_dag(dag_matrix)
[1] TRUE
> 
> # Example 2: This demonstration checks if a graph with a cycle returns false.
> cycle_matrix <- matrix(c(0, 1, 0,
+                          0, 0, 1,
+                          1, 0, 0), nrow = 3, byrow = TRUE)
> is_dag(cycle_matrix)
[1] FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is_dag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.269 0.031 0.271 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
